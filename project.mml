name: CyclOSM
description: 'Cycle oriented CartoCSS style.'
attribution: Data Â© OpenStreetMap (and) contributors, ODbL
bounds: &world
  - -180
  - -85.05112877980659
  - 180
  - 85.05112877980659
center:
  - 0
  - 0
  - 4
format: png
interactivity: false
minzoom: 0
maxzoom: 20
srs: "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"

# Various parts to be included later on
_parts:
  # Extents are used for tilemill, and dont actually make it to the generated XML
  extents: &extents
    extent: *world
    srs-name: "900913"
    srs: "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
  extents84: &extents84
    extent: *world
    srs-name: "WGS84"
    srs: "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
  osm2pgsql: &osm2pgsql
    type: "postgis"
    dbname: "osm"
    key_field: ""
    geometry_field: "way"
    extent: "-20037508,-20037508,20037508,20037508"

Stylesheet:
- palette.mss
- m11n-ways.mss
- m11n-pois.mss

Layer:
- id: roads_high
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          NULL as feature,
          way,
          COALESCE(
            CASE
              WHEN highway='raceway' THEN 'track'  -- render raceways as tracks
              WHEN highway='cycleway' THEN 'track'  -- render cycleways as tracks
              WHEN highway='road' THEN 'residential'  -- render "road" as residential
              WHEN highway='trunk' THEN 'motorway'  -- trunk as motorway, check can_bicycle if cyclable
              WHEN highway='trunk_link' THEN 'motorway_link'  -- trunk as motorway
              WHEN highway='footway' AND (bicycle='yes' OR bicycle='designated') THEN 'path'
              WHEN highway='bridleway' AND (bicycle='yes' OR bicycle='designated') THEN 'path'
              WHEN highway!='bus_guideway' THEN highway
              ELSE NULL
            END,
            CASE
              WHEN railway IN ('light_rail', 'subway', 'narrow_gauge', 'rail', 'tram') THEN 'railway'
              ELSE NULL
            END
          ) AS type,
          access,
          CASE
            WHEN tags->'maxspeed'~E'^\\d+$' THEN (tags->'maxspeed')::integer
            WHEN tags->'maxspeed'~E'^\\d+ mph$' THEN REPLACE(tags->'maxspeed', ' mph', '')::integer * 1.609344
            WHEN tags->'maxspeed'~E'^\\d+ knots$' THEN REPLACE(tags->'maxspeed', ' knots', '')::integer * 1.852
            WHEN tags->'maxspeed'='walk' THEN 5
            ELSE NULL
          END AS maxspeed_kmh,
          CASE
            WHEN COALESCE(motorcar, tags->'motor_vehicle', tags->'vehicle', access, 'yes') NOT IN ('no', 'private') THEN 'yes'
            -- goods and hgv don't need COALESCE chains, because the next step would be motorcar, which is checked above
            WHEN tags->'goods' NOT IN ('no', 'private') THEN 'yes'
            WHEN tags->'hgv' NOT IN ('no', 'private') THEN 'yes'
            -- moped and mofa are not checked, since most countries that have separate access controls for them treat them as quasi-bicycles
            WHEN COALESCE(tags->'motorcycle', tags->'motor_vehicle', tags->'vehicle', access, 'yes') NOT IN ('no', 'private') THEN 'yes'
            -- TODO: style psv-only roads slightly differently
            -- bus only needs to have its COALESCE chain go up to psv, because the next step would be motorcar, which is checked above
            WHEN COALESCE(tags->'bus', tags->'psv') NOT IN ('no', 'private') THEN 'psv'
            WHEN tags->'taxi' NOT IN ('no', 'private') THEN 'psv'
            ELSE 'no'
          END AS motor_vehicle,
          CASE
            WHEN tags->'cyclestreet' IN ('yes') THEN 'yes'
            WHEN tags->'bicycle_road' IN ('yes') THEN 'yes'
            ELSE 'no'
          END AS cyclestreet,
          CASE
            WHEN oneway IN ('yes', '-1') THEN oneway
            ELSE 'no'
          END AS oneway,
          CASE
            WHEN tags->'cycleway:left' IN ('track', 'opposite_track') THEN 'track'
            WHEN tags->'sidewalk:left:bicycle' != 'no' AND tags->'sidewalk:left:segregated' = 'yes' THEN 'track'
            WHEN tags->'cycleway:left' IN ('lane', 'opposite_lane') THEN 'lane'
            WHEN tags->'sidewalk:left:bicycle' IN ('designated', 'yes') THEN 'sidewalk'
            WHEN tags->'cycleway:left' IN ('share_busway', 'opposite_share_busway', 'shoulder', 'shared_lane') THEN 'busway'
            WHEN tags->'cycleway:both' IN ('track', 'opposite_track') THEN 'track'
            WHEN tags->'sidewalk:both:bicycle' != 'no' AND tags->'sidewalk:left:segregated' = 'yes' THEN 'track'
            WHEN tags->'cycleway:both' IN ('lane', 'opposite_lane') THEN 'lane'
            WHEN tags->'sidewalk:both:bicycle' IN ('designated', 'yes') THEN 'sidewalk'
            WHEN tags->'cycleway:both' IN ('share_busway', 'opposite_share_busway', 'shoulder', 'shared_lane') THEN 'busway'
            WHEN tags->'cycleway' IN ('track', 'opposite_track') THEN 'track'
            WHEN tags->'cycleway' IN ('lane', 'opposite_lane') THEN 'lane'
            WHEN tags->'cycleway' IN ('share_busway', 'opposite_share_busway', 'shoulder', 'shared_lane') THEN 'busway'
            ELSE NULL
          END AS cycleway_left_render,
          CASE
            WHEN tags->'cycleway:right' IN ('track', 'opposite_track') THEN 'track'
            WHEN tags->'sidewalk:right:bicycle' != 'no' AND tags->'sidewalk:left:segregated' = 'yes' THEN 'track'
            WHEN tags->'cycleway:right' IN ('lane', 'opposite_lane') THEN 'lane'
            WHEN tags->'sidewalk:right:bicycle' IN ('designated', 'yes') THEN 'sidewalk'
            WHEN tags->'cycleway:right' IN ('share_busway', 'opposite_share_busway', 'shoulder', 'shared_lane') THEN 'busway'
            WHEN tags->'cycleway:both' IN ('track', 'opposite_track') THEN 'track'
            WHEN tags->'sidewalk:both:bicycle' != 'no' AND tags->'sidewalk:left:segregated' = 'yes' THEN 'track'
            WHEN tags->'cycleway:both' IN ('lane', 'opposite_lane') THEN 'lane'
            WHEN tags->'sidewalk:both:bicycle' IN ('designated', 'yes') THEN 'sidewalk'
            WHEN tags->'cycleway:both' IN ('share_busway', 'opposite_share_busway', 'shoulder', 'shared_lane') THEN 'busway'
            WHEN tags->'cycleway' IN ('track', 'opposite_track') THEN 'track'
            WHEN tags->'cycleway' IN ('lane', 'opposite_lane') THEN 'lane'
            WHEN tags->'cycleway' IN ('share_busway', 'opposite_share_busway', 'shoulder', 'shared_lane') THEN 'busway'
            ELSE NULL
          END AS cycleway_right_render,
          CASE
            WHEN tags->'cycleway:left:oneway' IS NOT NULL THEN tags->'cycleway:left:oneway'
            WHEN tags->'cycleway:left' IN ('opposite_lane', 'opposite_track', 'opposite_share_busway') THEN '-1'
            WHEN tags->'cycleway' IN ('opposite_lane', 'opposite_track', 'opposite_share_busway') THEN '-1'
            ELSE NULL
          END AS cycleway_left_oneway,
          CASE
            WHEN tags->'cycleway:right:oneway' IS NOT NULL THEN tags->'cycleway:right:oneway'
            WHEN tags->'cycleway:right' IN ('opposite_lane', 'opposite_track', 'opposite_share_busway') THEN '-1'
            WHEN tags->'cycleway' IN ('opposite_lane', 'opposite_track', 'opposite_share_busway') THEN '-1'
            ELSE NULL
          END AS cycleway_right_oneway,
          CASE
            WHEN bicycle IN ('no', 'private', 'use_sidepath') THEN 'no'
            WHEN bicycle IS NOT NULL THEN bicycle
            WHEN tags->'motorroad' IN ('yes') THEN 'no'
            WHEN highway IN ('motorway', 'motorway_link') THEN 'no'
            WHEN tags->'vehicle' IN ('no', 'private') THEN 'no'
            WHEN tags->'vehicle' IS NOT NULL THEN tags->'vehicle'
            WHEN access IN ('no', 'private') THEN 'no'
            WHEN access IS NOT NULL THEN access
            ELSE NULL
          END AS can_bicycle,
          CASE
            WHEN tags->'segregated' IN ('yes') THEN 'yes'
            ELSE 'no'
          END AS segregated,
          CASE
            WHEN tags->'oneway:bicycle' IN ('yes', '-1') THEN tags->'oneway:bicycle'
            ELSE 'no'
          END AS oneway_bicycle,
          CASE
            -- From best tag to less precise quality surface tag (smoothness > track > surface).
            WHEN tags->'smoothness' IS NULL AND tracktype IS NULL AND surface IS NULL
              THEN 'unknown'
            WHEN tags->'smoothness' IN ('horrible', 'very_horrible', 'impassable')
              THEN 'mtb'
            WHEN tags->'smoothness' IN ('very_bad')
              THEN 'cyclocross'
            WHEN (tags->'smoothness' IN ('bad') AND tracktype IN ('grade3'))
              THEN 'cyclocross'

            WHEN tracktype IN ('grade4', 'grade5')
              THEN 'mtb'
            WHEN tracktype IN ('grade3')
              THEN 'cyclocross'
            WHEN tracktype IN ('grade2')
              THEN 'gravel'

            WHEN (surface IN ('dirt', 'earth', 'grass', 'grass_paver', 'gravel_turf', 'ground', 'mud', 'sand') AND highway = 'path' AND tags->'smoothness' IN ('bad'))
              THEN 'cyclocross'
            WHEN surface IN ('bad', 'pebblestone', 'dirt', 'earth', 'grass', 'grass_paver', 'gravel_turf', 'ground', 'mud', 'sand')
              THEN 'mtb'
            WHEN surface IN ('concrete:lanes', 'concrete:plates', 'sett', 'unhewn_cobblestone', 'cobblestone', 'wood', 'woodchips', 'unpaved')
              THEN 'cyclocross'
            WHEN surface IN ('fine_gravel', 'compacted', 'gravel')
              THEN 'gravel'
            ELSE 'unknown'
          END AS surface_type,
          CASE
            WHEN service in ('parking_aisle', 'drive-through', 'driveway') THEN 'minor'
            ELSE service
          END AS service,
          CASE
            WHEN tags->'mtb:scale'~E'^\\d+[+-]?$' THEN REPLACE(REPLACE(tags->'mtb:scale', '+', ''), '-', '')::integer
            ELSE NULL
          END AS mtb_scale,
          CASE
            WHEN tags->'mtb:scale:imba'~E'^\\d+$' THEN (tags->'mtb:scale:imba')::integer
            ELSE NULL
          END AS mtb_scale_imba,
          CASE
            WHEN highway='cycleway' OR (highway IN ('path', 'footway', 'pedestrian', 'bridleway') AND bicycle IN ('yes', 'designated')) THEN CASE WHEN layer~E'^\\d+$' THEN 100*layer::integer+99 ELSE 99 END
            WHEN highway IN ('path', 'footway', 'pedestrian', 'bridleway') THEN CASE WHEN layer~E'^\\d+$' THEN 100*layer::integer+98 ELSE 98 END
            ELSE z_order
          END AS z_order
        FROM planet_osm_line
        WHERE
          highway IS NOT NULL
          AND (tunnel IS NULL OR tunnel = 'no')
          AND (bridge IS NULL OR bridge = 'no')
          AND (covered IS NULL OR covered = 'no')
          AND (tags->'indoor' IS NULL OR tags->'indoor' = 'no')
          -- additional conditions for CXB gravel tiles
          AND (tags->'smoothness' IS NULL OR tags->'smoothness' IN ('excellent', 'good', 'intermediate', 'bad', 'very_bad', 'horrible'))
          AND (
              -- these surfaces are all suitable for gravel + cx, regardless of smoothness
              (surface IN ('finegravel', 'fine_gravel', 'gravel', 'pebblestone', 'compacted', 'concrete:lanes', 'concrete:plates'))
              OR
              -- these too (gravel)
              (tracktype IN ('grade2'))
              OR
              -- dirt/unpaved roads or tracktype=grade3 can go either way and are only considered if smoothness explicitly tells us it's reasonable
              -- (note that tracktype=grade2 with smoothness=null are still considered through other conditions)
              ((surface IN ('dirt', 'unpaved') OR tracktype = 'grade3') AND tags->'smoothness' IN ('excellent', 'good', 'intermediate', 'bad'))
          )
          AND (surface IS NULL OR surface <> 'sand')
        ORDER BY z_order
      ) AS data
  geometry: linestring
  properties:
    cache-features: true
    minzoom: 11
- id: roads_classification
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          NULL as feature,
          way,
          COALESCE(
            CASE
              WHEN highway='raceway' THEN 'track'  -- render raceways as tracks
              WHEN highway='cycleway' THEN 'track'  -- render cycleways as tracks
              WHEN highway='road' THEN 'residential'  -- render "road" as residential
              WHEN highway='trunk' THEN 'motorway'  -- trunk as motorway, check can_bicycle if cyclable
              WHEN highway='trunk_link' THEN 'motorway_link'  -- trunk as motorway
              WHEN highway='footway' AND (bicycle='yes' OR bicycle='designated') THEN 'path'
              WHEN highway='bridleway' AND (bicycle='yes' OR bicycle='designated') THEN 'path'
              WHEN highway!='bus_guideway' THEN highway
              ELSE NULL
            END,
            CASE
              WHEN railway IN ('light_rail', 'subway', 'narrow_gauge', 'rail', 'tram') THEN 'railway'
              ELSE NULL
            END
          ) AS type,
          access,
          CASE
            WHEN tags->'maxspeed'~E'^\\d+$' THEN (tags->'maxspeed')::integer
            WHEN tags->'maxspeed'~E'^\\d+ mph$' THEN REPLACE(tags->'maxspeed', ' mph', '')::integer * 1.609344
            WHEN tags->'maxspeed'~E'^\\d+ knots$' THEN REPLACE(tags->'maxspeed', ' knots', '')::integer * 1.852
            WHEN tags->'maxspeed'='walk' THEN 5
            ELSE NULL
          END AS maxspeed_kmh,
          CASE
            WHEN COALESCE(motorcar, tags->'motor_vehicle', tags->'vehicle', access, 'yes') NOT IN ('no', 'private') THEN 'yes'
            -- goods and hgv don't need COALESCE chains, because the next step would be motorcar, which is checked above
            WHEN tags->'goods' NOT IN ('no', 'private') THEN 'yes'
            WHEN tags->'hgv' NOT IN ('no', 'private') THEN 'yes'
            -- moped and mofa are not checked, since most countries that have separate access controls for them treat them as quasi-bicycles
            WHEN COALESCE(tags->'motorcycle', tags->'motor_vehicle', tags->'vehicle', access, 'yes') NOT IN ('no', 'private') THEN 'yes'
            -- TODO: style psv-only roads slightly differently
            -- bus only needs to have its COALESCE chain go up to psv, because the next step would be motorcar, which is checked above
            WHEN COALESCE(tags->'bus', tags->'psv') NOT IN ('no', 'private') THEN 'psv'
            WHEN tags->'taxi' NOT IN ('no', 'private') THEN 'psv'
            ELSE 'no'
          END AS motor_vehicle,
          CASE
            WHEN tags->'cyclestreet' IN ('yes') THEN 'yes'
            WHEN tags->'bicycle_road' IN ('yes') THEN 'yes'
            ELSE 'no'
          END AS cyclestreet,
          CASE
            WHEN oneway IN ('yes', '-1') THEN oneway
            ELSE 'no'
          END AS oneway,
          CASE
            WHEN tags->'cycleway:left' IN ('track', 'opposite_track') THEN 'track'
            WHEN tags->'sidewalk:left:bicycle' != 'no' AND tags->'sidewalk:left:segregated' = 'yes' THEN 'track'
            WHEN tags->'cycleway:left' IN ('lane', 'opposite_lane') THEN 'lane'
            WHEN tags->'sidewalk:left:bicycle' IN ('designated', 'yes') THEN 'sidewalk'
            WHEN tags->'cycleway:left' IN ('share_busway', 'opposite_share_busway', 'shoulder', 'shared_lane') THEN 'busway'
            WHEN tags->'cycleway:both' IN ('track', 'opposite_track') THEN 'track'
            WHEN tags->'sidewalk:both:bicycle' != 'no' AND tags->'sidewalk:left:segregated' = 'yes' THEN 'track'
            WHEN tags->'cycleway:both' IN ('lane', 'opposite_lane') THEN 'lane'
            WHEN tags->'sidewalk:both:bicycle' IN ('designated', 'yes') THEN 'sidewalk'
            WHEN tags->'cycleway:both' IN ('share_busway', 'opposite_share_busway', 'shoulder', 'shared_lane') THEN 'busway'
            WHEN tags->'cycleway' IN ('track', 'opposite_track') THEN 'track'
            WHEN tags->'cycleway' IN ('lane', 'opposite_lane') THEN 'lane'
            WHEN tags->'cycleway' IN ('share_busway', 'opposite_share_busway', 'shoulder', 'shared_lane') THEN 'busway'
            ELSE NULL
          END AS cycleway_left_render,
          CASE
            WHEN tags->'cycleway:right' IN ('track', 'opposite_track') THEN 'track'
            WHEN tags->'sidewalk:right:bicycle' != 'no' AND tags->'sidewalk:left:segregated' = 'yes' THEN 'track'
            WHEN tags->'cycleway:right' IN ('lane', 'opposite_lane') THEN 'lane'
            WHEN tags->'sidewalk:right:bicycle' IN ('designated', 'yes') THEN 'sidewalk'
            WHEN tags->'cycleway:right' IN ('share_busway', 'opposite_share_busway', 'shoulder', 'shared_lane') THEN 'busway'
            WHEN tags->'cycleway:both' IN ('track', 'opposite_track') THEN 'track'
            WHEN tags->'sidewalk:both:bicycle' != 'no' AND tags->'sidewalk:left:segregated' = 'yes' THEN 'track'
            WHEN tags->'cycleway:both' IN ('lane', 'opposite_lane') THEN 'lane'
            WHEN tags->'sidewalk:both:bicycle' IN ('designated', 'yes') THEN 'sidewalk'
            WHEN tags->'cycleway:both' IN ('share_busway', 'opposite_share_busway', 'shoulder', 'shared_lane') THEN 'busway'
            WHEN tags->'cycleway' IN ('track', 'opposite_track') THEN 'track'
            WHEN tags->'cycleway' IN ('lane', 'opposite_lane') THEN 'lane'
            WHEN tags->'cycleway' IN ('share_busway', 'opposite_share_busway', 'shoulder', 'shared_lane') THEN 'busway'
            ELSE NULL
          END AS cycleway_right_render,
          CASE
            WHEN tags->'cycleway:left:oneway' IS NOT NULL THEN tags->'cycleway:left:oneway'
            WHEN tags->'cycleway:left' IN ('opposite_lane', 'opposite_track', 'opposite_share_busway') THEN '-1'
            WHEN tags->'cycleway' IN ('opposite_lane', 'opposite_track', 'opposite_share_busway') THEN '-1'
            ELSE NULL
          END AS cycleway_left_oneway,
          CASE
            WHEN tags->'cycleway:right:oneway' IS NOT NULL THEN tags->'cycleway:right:oneway'
            WHEN tags->'cycleway:right' IN ('opposite_lane', 'opposite_track', 'opposite_share_busway') THEN '-1'
            WHEN tags->'cycleway' IN ('opposite_lane', 'opposite_track', 'opposite_share_busway') THEN '-1'
            ELSE NULL
          END AS cycleway_right_oneway,
          CASE
            WHEN bicycle IN ('no', 'private', 'use_sidepath') THEN 'no'
            WHEN bicycle IS NOT NULL THEN bicycle
            WHEN tags->'motorroad' IN ('yes') THEN 'no'
            WHEN highway IN ('motorway', 'motorway_link') THEN 'no'
            WHEN tags->'vehicle' IN ('no', 'private') THEN 'no'
            WHEN tags->'vehicle' IS NOT NULL THEN tags->'vehicle'
            WHEN access IN ('no', 'private') THEN 'no'
            WHEN access IS NOT NULL THEN access
            ELSE NULL
          END AS can_bicycle,
          CASE
            WHEN tags->'segregated' IN ('yes') THEN 'yes'
            ELSE 'no'
          END AS segregated,
          CASE
            WHEN tags->'oneway:bicycle' IN ('yes', '-1') THEN tags->'oneway:bicycle'
            ELSE 'no'
          END AS oneway_bicycle,
          CASE
            -- From best tag to less precise quality surface tag (smoothness > track > surface).
            WHEN tags->'smoothness' IS NULL AND tracktype IS NULL AND surface IS NULL
              THEN 'unknown'
            WHEN tags->'smoothness' IN ('horrible', 'very_horrible', 'impassable')
              THEN 'mtb'
            WHEN tags->'smoothness' IN ('very_bad')
              THEN 'cyclocross'
            WHEN (tags->'smoothness' IN ('bad') AND tracktype IN ('grade3'))
              THEN 'cyclocross'

            WHEN tracktype IN ('grade4', 'grade5')
              THEN 'mtb'
            WHEN tracktype IN ('grade3')
              THEN 'cyclocross'
            WHEN tracktype IN ('grade2')
              THEN 'gravel'

            WHEN (surface IN ('dirt', 'earth', 'grass', 'grass_paver', 'gravel_turf', 'ground', 'mud', 'sand') AND highway = 'path' AND tags->'smoothness' IN ('bad'))
              THEN 'cyclocross'
            WHEN surface IN ('bad', 'pebblestone', 'dirt', 'earth', 'grass', 'grass_paver', 'gravel_turf', 'ground', 'mud', 'sand')
              THEN 'mtb'
            WHEN surface IN ('concrete:lanes', 'concrete:plates', 'sett', 'unhewn_cobblestone', 'cobblestone', 'wood', 'woodchips', 'unpaved')
              THEN 'cyclocross'
            WHEN surface IN ('fine_gravel', 'compacted', 'gravel')
              THEN 'gravel'
            ELSE 'unknown'
          END AS surface_type,
          CASE
            WHEN (surface IN ('sett', 'cobblestone', 'unhewn_cobblestone'))
                THEN 'sett'
            WHEN (surface IN ('sand') AND tracktype IN ('grade4', 'grade5'))
                THEN 'sand'
            WHEN (surface IN ('sand') AND tags->'smoothness' IN ('very_bad', 'horrible', 'very_horrible'))
                THEN 'sand'
          END AS surface_classification,
          CASE
            WHEN service in ('parking_aisle', 'drive-through', 'driveway') THEN 'minor'
            ELSE service
          END AS service,
          CASE
            WHEN tags->'mtb:scale'~E'^\\d+[+-]?$' THEN REPLACE(REPLACE(tags->'mtb:scale', '+', ''), '-', '')::integer
            ELSE NULL
          END AS mtb_scale,
          CASE
            WHEN tags->'mtb:scale:imba'~E'^\\d+$' THEN (tags->'mtb:scale:imba')::integer
            ELSE NULL
          END AS mtb_scale_imba,
          CASE
            WHEN highway='cycleway' OR (highway IN ('path', 'footway', 'pedestrian', 'bridleway') AND bicycle IN ('yes', 'designated')) THEN CASE WHEN layer~E'^\\d+$' THEN 100*layer::integer+99 ELSE 99 END
            WHEN highway IN ('path', 'footway', 'pedestrian', 'bridleway') THEN CASE WHEN layer~E'^\\d+$' THEN 100*layer::integer+98 ELSE 98 END
            ELSE z_order
          END AS z_order
        FROM planet_osm_line
        WHERE
          highway IS NOT NULL
        ORDER BY z_order
      ) AS data
  geometry: linestring
  properties:
    cache-features: true
    minzoom: 11
- id: landuse
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          NULL AS feature,
          way,
          way_area AS area,
          COALESCE(
            CASE WHEN landuse IS NOT NULL THEN ('landuse_' || landuse) ELSE NULL END,
            CASE WHEN amenity IS NOT NULL THEN ('amenity_' || amenity) ELSE NULL END
          ) AS type,
          sport
        FROM planet_osm_polygon
        WHERE landuse IN ('cemetery')
        ORDER BY way_area DESC
      ) AS data
  geometry: polygon
  properties:
    minzoom: 12
- id: amenities-poly
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    # Update the layer with the text below as well when editing this query.
    table: |-
      (
        SELECT
          access,
          bicycle,
          tags->'mtb' AS mtb,
          covered,
          tags->'shelter' AS shelter,
          way,
          way_area AS area,
          name,
          COALESCE( -- order is important here
            'aeroway_' || CASE WHEN aeroway IN ('helipad', 'aerodrome') THEN aeroway ELSE NULL END,
            'tourism_' || CASE WHEN tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'wilderness_hut', 'guest_house', 'apartment', 'hostel', 'hotel', 'motel', 'information', 'museum', 'viewpoint', 'picnic_site', 'gallery') THEN tourism ELSE NULL END,
            'shop_' ||  CASE WHEN shop IN ('bicycle', 'bakery', 'beverage', 'convenience', 'convenience;gas', 'doityourself', 'gas', 'greengrocer', 'supermarket', 'pastry', 'sports') THEN shop ELSE NULL END,
            'amenity_' || CASE WHEN amenity IN ('atm', 'bank', 'bar', 'bench', 'bicycle_rental', 'bicycle_parking', 'bicycle_repair_station', 'biergarten', 'cafe', 'car_wash', 'compressed_air', 'community_centre', 'clinic', 'doctors', 'drinking_water', 'fast_food', 'ferry_terminal', 'food_court', 'fountain', 'fuel', 'hospital', 'ice_cream', 'internet_cafe', 'parking', 'pharmacy', 'place_of_worship', 'police', 'post_office', 'post_box', 'pub', 'public_bath', 'restaurant', 'shelter', 'shower', 'toilets', 'water_point', 'cinema', 'theatre', 'bureau_de_change', 'casino', 'library', 'motorcycle_parking', 'charging_station', 'vending_machine') THEN amenity ELSE NULL END,
            'shop_' || CASE WHEN tags->'service:bicycle:retail'='yes' OR tags->'service:bicycle:repair'='yes' OR tags->'service:bicycle:rental'='yes' THEN 'bicycle' ELSE NULL END,
            'emergency_' || CASE WHEN tags->'emergency' IS NOT NULL THEN tags->'emergency' ELSE NULL END,
            'healthcare_' || CASE WHEN tags->'healthcare' IN ('clinic', 'hospital') THEN tags->'healthcare' ELSE NULL END,
            'leisure_' || CASE WHEN leisure IN ('picnic_table', 'sports_centre') THEN leisure ELSE NULL END,
            'man_made_' || CASE WHEN man_made IN ('mast', 'tower', 'water_tower', 'lighthouse', 'windmill', 'cross', 'obelisk', 'communications_tower', 'telescope', 'chimney', 'crane', 'storage_tank', 'silo', 'water_tap', 'monitoring_station') THEN man_made ELSE NULL END,
            CASE WHEN tags->'mountain_pass' = 'yes' THEN 'mountain_pass' ELSE NULL END,
            'natural_' || CASE WHEN "natural" IN ('peak', 'volcano', 'saddle', 'spring', 'cave_entrance') THEN "natural" ELSE NULL END,
            'waterway_' || CASE WHEN waterway IN ('waterfall') THEN waterway ELSE NULL END,
            'historic_' || CASE WHEN historic IN ('memorial', 'monument', 'archaeological_site', 'wayside_cross', 'fort', 'wayside_shrine', 'castle', 'manor', 'city_gate') THEN historic ELSE NULL END,
            'military_'|| CASE WHEN military IN ('bunker') THEN military ELSE NULL END,
            'highway_'|| CASE WHEN highway IN ('bus_stop', 'elevator', 'traffic_signals') THEN highway ELSE NULL END,
            'power_' || power
          ) AS feature,
          CASE
            WHEN tags->'capacity'~E'^\\d+$' THEN (tags->'capacity')::integer
            ELSE NULL
          END AS capacity,
          religion,
          tags->'denomination' AS denomination,
          tags->'compressed_air' AS compressed_air,
          tags->'service:bicycle:pump' AS service_bicycle_pump,
          tags->'service:bicycle:diy' AS service_bicycle_diy,
          CASE
            WHEN tags->'service:bicycle:retail'='yes' OR tags->'service:bicycle:repair'='yes' OR tags->'service:bicycle:rental'='yes' THEN 'yes' ELSE NULL
          END AS service_bicycle_retail_repair_rental,
          tags->'car_wash' as car_wash,
          tags->'drinking_water' AS drinking_water,
          tags->'location' AS location,
          tags->'memorial' AS memorial,
          tags->'castle_type' AS castle_type,
          tags->'information' AS information,
          tags->'artwork_type' as artwork_type,
          tags->'icao' as icao,
          tags->'iata' as iata,
          "generator:source",
          tags->'supervised' as supervised,
          tags->'bicycle_parking' as bicycle_parking,
          tags->'vending' as vending,
          tags->'automated' as automated,
          CASE
            WHEN "natural" IN ('peak', 'volcano', 'saddle') THEN NULL
            WHEN "waterway" IN ('waterfall') THEN
              CASE
                WHEN tags->'height' ~ '^\d{1,3}(\.\d+)?( m)?$' THEN (SUBSTRING(tags->'height', '^(\d{1,3}(\.\d+)?)( m)?$'))::NUMERIC
              ELSE NULL
              END
            WHEN tags->'capacity'~E'^\\d+$' THEN (tags->'capacity')::integer
            ELSE NULL
          END AS score,
          NULL AS elevation,
          CASE
            WHEN (man_made IN ('mast', 'tower', 'chimney', 'crane') AND (tags->'location' NOT IN ('roof', 'rooftop') OR (tags->'location') IS NULL)) OR waterway IN ('waterfall') THEN
              CASE
                WHEN tags->'height' ~ '^\d{1,3}(\.\d+)?( m)?$' THEN (SUBSTRING(tags->'height', '^(\d{1,3}(\.\d+)?)( m)?$'))::NUMERIC
              ELSE NULL
            END
            ELSE NULL
          END AS height,
          way_area/NULLIF(!pixel_width!::real*!pixel_height!::real,0) AS way_pixels
        FROM planet_osm_polygon
        WHERE aeroway IN ('helipad', 'aerodrome')
          OR tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'wilderness_hut', 'guest_house', 'apartment', 'hostel',
              'hotel', 'motel', 'information', 'museum', 'viewpoint', 'picnic_site', 'gallery')
          OR amenity IN ('atm', 'bank', 'bar', 'bench', 'bicycle_rental', 'bicycle_parking', 'bicycle_repair_station',
                         'biergarten', 'cafe', 'car_wash', 'compressed_air', 'community_centre', 'clinic', 'doctors', 'drinking_water', 'fast_food',
                         'ferry_terminal', 'food_court', 'fountain', 'fuel', 'hospital', 'ice_cream', 'internet_cafe',
                         'parking', 'pharmacy', 'place_of_worship', 'police', 'post_office', 'post_box', 'pub', 'public_bath',
                         'restaurant', 'shelter', 'shower', 'toilets', 'water_point', 'cinema', 'theatre',
                         'bureau_de_change', 'casino', 'library')
          OR tags->'car_wash'='yes'
          OR (amenity='motorcycle_parking' AND (bicycle='yes' OR bicycle='designated'))
          OR (amenity='charging_station' AND (bicycle='yes' OR bicycle='designated'))
          OR (amenity='vending_machine' AND tags->'vending'='bicycle_tube')
          OR tags->'healthcare' IN ('clinic', 'hospital')
          OR shop IN ('bicycle', 'bakery', 'beverage', 'convenience', 'convenience;gas', 'doityourself', 'gas', 'greengrocer', 'supermarket', 'pastry', 'sports')
          OR leisure='picnic_table'
          OR (leisure='sports_centre' AND sport='swimming')
          OR (
            man_made IN ('mast', 'tower', 'water_tower', 'lighthouse', 'windmill', 'cross', 'obelisk', 'communications_tower', 'telescope', 'chimney', 'crane', 'storage_tank', 'silo')
            AND (tags->'location' NOT IN ('roof', 'rooftop') OR (tags->'location') IS NULL)
          )
          OR man_made IN ('water_tap')
          OR man_made IN ('monitoring_station') AND tags->'monitoring:bicycle'='yes'
          OR "natural" IN ('peak', 'volcano', 'saddle', 'spring', 'cave_entrance')
          OR tags->'mountain_pass' = 'yes'
          OR waterway IN ('waterfall')
          OR historic IN ('memorial', 'monument', 'archaeological_site', 'wayside_cross', 'fort', 'wayside_shrine', 'castle', 'manor', 'city_gate')
          OR military IN ('bunker')
          OR tags->'emergency'='phone'
          OR highway IN ('elevator', 'traffic_signals')
          OR ((highway='bus_stop' OR public_transport='platform') AND (tags->'shelter'='yes' OR covered='yes'))
          OR (power = 'generator' AND "generator:source"='wind')
        ORDER BY
            CASE
                -- Bike amenities
                WHEN shop IN ('bicycle', 'sports') THEN 0
                WHEN amenity IN ('bicycle_rental') Then 10
                -- Emergency
                WHEN tags->'healthcare' IS NOT NULL OR tags->'emergency'='phone' OR amenity IN ('hospital', 'clinic', 'doctors', 'pharmacy') THEN 20
                -- Other emergency-related amenities
                WHEN amenity IN ('bicycle_repair_station', 'compressed_air', 'drinking_water', 'police', 'toilets',
                  'water_point', 'charging_station') THEN 21
                WHEN tags->'compressed_air'='yes' THEN 22
                --- Parkings
                WHEN amenity IN ('bicycle_parking', 'motorcycle_parking') THEN 32
                -- Supermarkets
                WHEN shop='supermarket' THEN 40
                -- Convenience
                WHEN shop='convenience' OR shop='convenience;gas' THEN 50
                -- Food
                WHEN shop IS NOT NULL OR amenity IN ('bar', 'biergarten', 'cafe', 'fast_food', 'food_court', 'pub', 'restaurant') THEN 60
                -- Everything else
                ELSE NULL
            END ASC NULLS LAST,
            feature,
            score DESC NULLS LAST
      ) AS data
  geometry: polygon
  properties:
    minzoom: 10
- id: amenities-points
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    # Update the layer with the text below as well when editing this query.
    table: |-
      (
        SELECT
          access,
          bicycle,
          tags->'mtb' AS mtb,
          covered,
          tags->'shelter' AS shelter,
          way,
          name,
          COALESCE( -- order is important here
            'aeroway_' || CASE WHEN aeroway IN ('helipad', 'aerodrome') THEN aeroway ELSE NULL END,
            'tourism_' || CASE WHEN tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'wilderness_hut', 'guest_house', 'apartment', 'hostel', 'hotel', 'motel', 'information', 'museum', 'viewpoint', 'picnic_site', 'gallery') THEN tourism ELSE NULL END,
            'shop_' ||  CASE WHEN shop IN ('bicycle', 'bakery', 'beverage', 'convenience', 'convenience;gas', 'doityourself', 'gas', 'greengrocer', 'supermarket', 'pastry', 'sports') THEN shop ELSE NULL END,
            'amenity_' || CASE WHEN amenity IN ('atm', 'bank', 'bar', 'bench', 'bicycle_rental', 'bicycle_parking', 'bicycle_repair_station', 'biergarten', 'cafe', 'car_wash', 'compressed_air', 'community_centre', 'clinic', 'doctors', 'drinking_water', 'fast_food', 'ferry_terminal', 'food_court', 'fountain', 'fuel', 'hospital', 'ice_cream', 'internet_cafe', 'parking', 'pharmacy', 'place_of_worship', 'police', 'post_office', 'post_box', 'pub', 'public_bath', 'restaurant', 'shelter', 'shower', 'toilets', 'water_point', 'cinema', 'theatre', 'bureau_de_change', 'casino', 'library', 'motorcycle_parking', 'charging_station', 'vending_machine') THEN amenity ELSE NULL END,
            'shop_' || CASE WHEN tags->'service:bicycle:retail'='yes' OR tags->'service:bicycle:repair'='yes' OR tags->'service:bicycle:rental'='yes' THEN 'bicycle' ELSE NULL END,
            'emergency_' || CASE WHEN tags->'emergency' IS NOT NULL THEN tags->'emergency' ELSE NULL END,
            'healthcare_' || CASE WHEN tags->'healthcare' IN ('clinic', 'hospital') THEN tags->'healthcare' ELSE NULL END,
            'leisure_' || CASE WHEN leisure IN ('picnic_table', 'sports_centre') THEN leisure ELSE NULL END,
            'man_made_' || CASE WHEN man_made IN ('mast', 'tower', 'water_tower', 'lighthouse', 'windmill', 'cross', 'obelisk', 'communications_tower', 'telescope', 'chimney', 'crane', 'storage_tank', 'silo', 'water_tap', 'monitoring_station') THEN man_made ELSE NULL END,
            CASE WHEN tags->'mountain_pass' = 'yes' THEN 'mountain_pass' ELSE NULL END,
            'natural_' || CASE WHEN "natural" IN ('peak', 'volcano', 'saddle', 'spring', 'cave_entrance') THEN "natural" ELSE NULL END,
            'waterway_' || CASE WHEN waterway IN ('waterfall') THEN waterway ELSE NULL END,
            'historic_' || CASE WHEN historic IN ('memorial', 'monument', 'archaeological_site', 'wayside_cross', 'fort', 'wayside_shrine', 'castle', 'manor', 'city_gate') THEN historic ELSE NULL END,
            'military_'|| CASE WHEN military IN ('bunker') THEN military ELSE NULL END,
            'highway_'|| CASE WHEN highway IN ('bus_stop', 'elevator', 'traffic_signals') THEN highway ELSE NULL END,
            'highway_' || CASE WHEN tags @> 'ford=>yes' OR tags @> 'ford=>stepping_stones' THEN 'ford' END,
            'power_' || power,
            'xmas_' || CASE WHEN tags->'xmas:feature' IN ('tree', 'market') AND (EXTRACT(MONTH FROM CURRENT_DATE) = '12') AND (EXTRACT(DAY FROM CURRENT_DATE) >= '1') THEN tags->'xmas:feature' ELSE NULL END
          ) AS feature,
          CASE
            WHEN tags->'capacity'~E'^\\d+$' THEN (tags->'capacity')::integer
            ELSE NULL
          END AS capacity,
          religion,
          tags->'denomination' AS denomination,
          tags->'compressed_air' AS compressed_air,
          tags->'service:bicycle:pump' AS service_bicycle_pump,
          tags->'service:bicycle:diy' AS service_bicycle_diy,
          CASE
            WHEN tags->'service:bicycle:retail'='yes' OR tags->'service:bicycle:repair'='yes' OR tags->'service:bicycle:rental'='yes' THEN 'yes' ELSE NULL
          END AS service_bicycle_retail_repair_rental,
          tags->'car_wash' as car_wash,
          tags->'drinking_water' AS drinking_water,
          tags->'location' AS location,
          tags->'memorial' AS memorial,
          tags->'castle_type' AS castle_type,
          tags->'information' AS information,
          tags->'artwork_type' as artwork_type,
          tags->'icao' as icao,
          tags->'iata' as iata,
          "generator:source",
          tags->'supervised' as supervised,
          tags->'bicycle_parking' as bicycle_parking,
          tags->'vending' as vending,
          tags->'automated' as automated,
          CASE
            WHEN "natural" IN ('peak', 'volcano', 'saddle')
              OR tags->'mountain_pass' = 'yes' THEN
              CASE
                WHEN ele ~ '^-?\d{1,4}(\.\d+)?$' THEN ele::NUMERIC
                ELSE NULL
              END
            WHEN "waterway" IN ('waterfall') THEN
              CASE
                WHEN tags->'height' ~ '^\d{1,3}(\.\d+)?( m)?$' THEN (SUBSTRING(tags->'height', '^(\d{1,3}(\.\d+)?)( m)?$'))::NUMERIC
              ELSE NULL
              END
            WHEN tags->'capacity'~E'^\\d+$' THEN (tags->'capacity')::integer
            ELSE NULL
          END AS score,
          CASE
            WHEN "natural" IN ('peak', 'volcano', 'saddle')
              OR tourism = 'alpine_hut' OR (tourism = 'information' AND tags->'information' = 'guidepost')
              OR amenity = 'shelter'
              OR tags->'mountain_pass' = 'yes'
              THEN
              CASE
                WHEN ele ~ '^-?\d{1,4}(\.\d+)?$' THEN ele::NUMERIC
                ELSE NULL
              END
            ELSE NULL
          END AS elevation,
          CASE
            WHEN (man_made IN ('mast', 'tower', 'chimney', 'crane') AND (tags->'location' NOT IN ('roof', 'rooftop') OR (tags->'location') IS NULL)) OR waterway IN ('waterfall') THEN
              CASE
                WHEN tags->'height' ~ '^\d{1,3}(\.\d+)?( m)?$' THEN (SUBSTRING(tags->'height', '^(\d{1,3}(\.\d+)?)( m)?$'))::NUMERIC
              ELSE NULL
            END
            ELSE NULL
          END AS height,
          NULL AS way_pixels
        FROM planet_osm_point
        WHERE aeroway IN ('helipad', 'aerodrome')
          OR tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'wilderness_hut', 'guest_house', 'apartment', 'hostel',
              'hotel', 'motel', 'information', 'museum', 'viewpoint', 'picnic_site', 'gallery')
          OR amenity IN ('atm', 'bank', 'bar', 'bench', 'bicycle_rental', 'bicycle_parking', 'bicycle_repair_station',
                         'biergarten', 'cafe', 'car_wash', 'compressed_air', 'community_centre', 'clinic', 'doctors', 'drinking_water', 'fast_food',
                         'ferry_terminal', 'food_court', 'fountain', 'fuel', 'hospital', 'ice_cream', 'internet_cafe',
                         'parking', 'pharmacy', 'place_of_worship', 'police', 'post_office', 'post_box', 'pub', 'public_bath',
                         'restaurant', 'shelter', 'shower', 'toilets', 'water_point', 'cinema', 'theatre',
                         'bureau_de_change', 'casino', 'library')
          OR tags->'car_wash'='yes'
          OR (amenity='motorcycle_parking' AND (bicycle='yes' OR bicycle='designated'))
          OR (amenity='charging_station' AND (bicycle='yes' OR bicycle='designated'))
          OR (amenity='vending_machine' AND tags->'vending'='bicycle_tube')
          OR tags->'healthcare' IN ('clinic', 'hospital')
          OR shop IN ('bicycle', 'bakery', 'beverage', 'convenience', 'convenience;gas', 'doityourself', 'gas', 'greengrocer', 'supermarket', 'pastry', 'sports')
          OR leisure='picnic_table'
          OR (leisure='sports_centre' AND sport='swimming')
          OR (
            man_made IN ('mast', 'tower', 'water_tower', 'lighthouse', 'windmill', 'cross', 'obelisk', 'communications_tower', 'telescope', 'chimney', 'crane', 'storage_tank', 'silo')
            AND (tags->'location' NOT IN ('roof', 'rooftop') OR (tags->'location') IS NULL)
          )
          OR man_made IN ('water_tap')
          OR man_made IN ('monitoring_station') AND tags->'monitoring:bicycle'='yes'
          OR "natural" IN ('peak', 'volcano', 'saddle', 'spring', 'cave_entrance')
          OR tags->'mountain_pass' = 'yes'
          OR waterway IN ('waterfall')
          OR historic IN ('memorial', 'monument', 'archaeological_site', 'wayside_cross', 'fort', 'wayside_shrine', 'castle', 'manor', 'city_gate')
          OR military IN ('bunker')
          OR tags->'emergency'='phone'
          OR highway IN ('elevator', 'traffic_signals')
          OR ((highway='bus_stop' OR public_transport='platform') AND (tags->'shelter'='yes' OR covered='yes'))
          OR (power = 'generator' AND "generator:source"='wind')
          OR tags->'ford' IS NOT NULL
          OR tags->'xmas:feature' IN ('tree', 'market')
        ORDER BY
            CASE
                -- Bike amenities
                WHEN shop IN ('bicycle', 'sports') THEN 0
                WHEN amenity IN ('bicycle_rental') Then 10
                -- Emergency
                WHEN tags->'healthcare' IS NOT NULL OR tags->'emergency'='phone' OR amenity IN ('hospital', 'clinic', 'doctors', 'pharmacy') THEN 20
                -- Other emergency-related amenities
                WHEN amenity IN ('bicycle_repair_station', 'compressed_air', 'drinking_water', 'police', 'toilets',
                  'water_point', 'charging_station') THEN 21
                WHEN tags->'compressed_air'='yes' THEN 22
                --- Parkings
                WHEN amenity IN ('bicycle_parking', 'motorcycle_parking') THEN 32
                -- Supermarkets
                WHEN shop='supermarket' THEN 40
                -- Convenience
                WHEN shop='convenience' OR shop='convenience;gas' THEN 50
                -- Food
                WHEN shop IS NOT NULL OR amenity IN ('bar', 'biergarten', 'cafe', 'fast_food', 'food_court', 'pub', 'restaurant') THEN 60
                -- Everything else
                ELSE NULL
            END ASC NULLS LAST,
            feature,
            score DESC NULLS LAST
      ) AS data
  geometry: point
  properties:
    cache-features: true
    minzoom: 10
- id: amenities-line
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          COALESCE(
            'highway_' || CASE WHEN tags @> 'ford=>yes' OR tags @> 'ford=>stepping_stones' THEN 'ford' END
          ) AS feature
        FROM planet_osm_line
        -- The upcoming where clause is needed for performance only, as the CASE statements would end up doing the equivalent filtering
        WHERE tags @> 'ford=>yes' OR tags @> 'ford=>stepping_stones'
        ORDER BY CASE WHEN layer~E'^\\d+$' THEN layer::integer ELSE 0 END
      ) AS data
  geometry: linestring
  properties:
    minzoom: 16
